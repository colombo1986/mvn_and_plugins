package cl.santander.integration.process;


import cl.santander.integration.dto.BaseDto;
import cl.santander.integration.dto.DolarObservado_3_1;
import cl.santander.integration.entities.Caja;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;

import lombok.extern.slf4j.Slf4j;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.kafka.KafkaConstants;
import org.springframework.stereotype.Component;
import zipkin2.Call;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Autowired: Marks a constructor, field, setter method, or config method as to
 * be autowired by Spring's dependency injection facilities. Only one
 * constructor (at max) of any given bean class may carry this annotation,
 * indicating the constructor to autowire when used as a Spring bean.
 * 
 * @Component: is the most generic Spring annotation. A Java class decorated
 *             with
 * @Component is found during classpath scanning and registered in the context
 *            as a Spring bean.
 * 
 *            RouterBuilder: The RouteBuilder is a base class which is derived
 *            from to create routing rules using the DSL. Instances of
 *            RouteBuilder are then added to the CamelContext.
 */


//    1. recibir desde RegulateCompliance los json de mongo correspondientes a caja y tf ,
//    2. despues hay que mapearlos a una lista que corresponden a  las entidades Caja y TF que estan en extraction web
//    3. Si la lista contiene elementos , hay que sacar el ultimo elemento de la lista y obtener la hora y almacenarla ,
//       esa hora se usara en el siguiente llamado de la query
//    4. Enviar todos los elementos a una cola de Kafka
//    5. En otro metodo del extraction web hay que leer esa cola de Kafka y mapear los elementos a un objeto tipo informe
//    6. Con Camel enviar la lista de elementos ya mapeados en objeto tipo informe a un endpoint de RegulateCompliance , el cual lo enviara a Exadata y a donde se tenga que guardar el csv.


@Component
@Slf4j
public class KafkaProducerRouter extends RouteBuilder {

    Gson gson = new Gson();

    List<String> kafkaMessagesRecivied = new ArrayList<>();

    @Override
    public void configure() throws Exception {

        getContext().setTracing(true);


        // Timer para iniciar los procesos secuenciales
        from("timer:sequentialTimer?period=60000") // Ejecuta cada 60 segundos
                .log("Iniciando procesos secuenciales...")
                .to("direct:processOne") // Llama al primer proceso
                .log("Proceso 1 completado.")
                .log("Todos los procesos secuenciales se completaron.");

        // ProcessONE: Genera mensajes y los envía a Kafka uno por uno con clave y valor
        from("direct:processOne") // Proceso 1
                .setHeader("fechaEjecucion", constant("20231229")) // Parámetro de consulta
                .setHeader("horaEjecucion", constant("102245")) // Parámetro de consulta
                .toD("http://localhost:9150/api/local/test/getAll?fechaEjecucion=${header.fechaEjecucion}&horaEjecucion=${header.horaEjecucion}")
                .process(exchange -> {
                    String body =  exchange.getIn().getBody(String.class);
                    log.info("Cuerpo recibido desde el servicio REST:");
                    log.info(body);

                    List<String> bodyStringList = transformStringToStringList(body);
                    List<Caja> cajaDtoList = transformStringListToCajaList(bodyStringList);
                    exchange.getIn().setBody(cajaDtoList); // Coloca la lista de objetos Caja en el cuerpo
                })
                .split(body()) // Divide la lista en elementos individuales (cada objeto Caja)
                .process(exchange -> {
                    Caja caja = exchange.getIn().getBody(Caja.class); // Obtiene el objeto actual

                    String jsonMessage = gson.toJson(caja);// Convierte el objeto a JSON
                    String key = caja.getId().getOid(); // Obtiene la clave de la Caja

                    exchange.getIn().setHeader("kafka.KEY", key); // Configura la clave para Kafka
                    exchange.getIn().setBody(jsonMessage); // Configura el cuerpo del mensaje como JSON

                    log.info("Preparando mensaje para Kafka - Clave: {}, Valor: {}", key, jsonMessage);
                })
                .to("kafka:sicam.3.1.opeCanalTF?brokers=DCTAMSBBS401.cl.bsch:8080") // Envía a Kafka
                .log("Mensaje enviado a Kafka - Clave: ${header.kafka.KEY}, Valor: ${body}");

        // ProcessTWO: Inscribe un consumidor de Kafka en Camel y simula el consumo de mensajes desde Kafka para procesarlos
        from("direct:processTwo") // Proceso 2
                .log("Inscribiendo el consumidor de Kafka...")
                .process(exchange -> {
                    // Simula un mensaje recibido desde Kafka
                    String simulatedKafkaMessage = "{\"key\":\"value\"}";
                    exchange.getIn().setBody(simulatedKafkaMessage);
                })
                .log("Mensaje simulado desde Kafka: ${body}")
                .process(exchange -> {
                    String message = exchange.getIn().getBody(String.class);
                    log.info("Procesando mensaje simulado de Kafka:");
                    log.info(message);
                });

        // Ruta real para consumir mensajes desde Kafka
        from("kafka:sicam.3.1.opeCanalTF?brokers=DCTAMSBBS401.cl.bsch:8080") // Ruta para consumir mensajes de Kafka
                .routeId("kafkaConsumerRoute") // Establece un ID único para esta ruta
                .log("Mensaje recibido de Kafka: ${body}") // Log para el mensaje recibido
                .process(exchange -> {
                    // Procesar el mensaje recibido desde Kafka
                    Object body = exchange.getIn().getBody();

                    if(body instanceof String){
                        log.info("Cuerpo recibido como String");
                    } else if (body instanceof ArrayList) {
                        log.info("Cuerpo recibido como ArrayList serializando a JSON");
                        ObjectMapper objectMapper = new ObjectMapper();
                        String jsonBody = objectMapper.writeValueAsString(body);
                    }else{
                        throw new IllegalArgumentException("tipo de cuerpo inesperado: "+body);
                    }

//                    String message = exchange.getIn().getBody(String.class);
                    log.info("Mensaje procesado desde Kafka y agregado a la lista:");
                    kafkaMessagesRecivied.add((String) body);
//                    log.info("Agregando cabeceras http");
                    exchange.getIn().setHeader(Exchange.HTTP_METHOD, "POST");
                    exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "application/json");
                    log.info("Mapeando con ObjectMapper ...");
                    ObjectMapper objectMapper = new ObjectMapper();
                    objectMapper.writeValueAsBytes(kafkaMessagesRecivied);

                    exchange.getIn().setBody(processMessage(kafkaMessagesRecivied));

                })

                .to("http://localhost:9050/api/local/create")
                .log("Enviado http://localhost:9050/api/local/create ");


    }



    public List<String> processMessage(List<String> stringList){

        List<String> dolarObservado_3_1JsonList = new ArrayList<>();

        List<BaseDto> baseDtoList = stringList.stream()
                .map(json -> gson.fromJson(json, BaseDto.class))
                .collect(Collectors.toList());

        for(BaseDto baseDto: baseDtoList){

            DolarObservado_3_1 dolarobs = new DolarObservado_3_1();

            dolarobs.setTipoRegistro("01");
            dolarobs.setRutReportante("97036000-K");

            if (baseDto.getOperacion().getFechaTransaccion() == null) {
                dolarobs.setFechaHoraOperacion("14-11-2024 12:15:00");
            } else {
                dolarobs.setFechaHoraOperacion(baseDto.getOperacion().getFechaTransaccion());
            }// fecha y hora transaccion

            if (baseDto.getOperacion().getSubproducto() == null) {
                dolarobs.setTipoOperacion("COMPRA");
            } else {
                dolarobs.setTipoOperacion(baseDto.getOperacion().getSubproducto());
            } // tipo operacion (compra/venta)

            if (baseDto.getAccion().getAccion() == null) {
                dolarobs.setEventoReporte("Ingreso");
            } else {
                dolarobs.setEventoReporte(baseDto.getAccion().getAccion());
            }// tipo accion (ingreso/modificacion/cancelacion)

            if (baseDto.getRespuesta().getIdOperacionBox() == null) {
                dolarobs.setIdentificadorOperacion("23956841");
            } else {
                dolarobs.setIdentificadorOperacion(baseDto.getRespuesta().getIdOperacionBox());
            } // id operacion

            if (baseDto.getOperacion().getRutCliente() == null) {
                dolarobs.setRutContraparte("9785647-5");
            } else {
                dolarobs.setRutContraparte(baseDto.getOperacion().getRutCliente());
            }// Rut Cliente

            dolarobs.setLeiContraparte("");// Canales TIER2 no aplica LEI

            if (baseDto.getOperacion().getNombreCliente() == null) {
                dolarobs.setNombreContraparte("Luis pay asociados");
            } else {
                dolarobs.setNombreContraparte(baseDto.getOperacion().getNombreCliente());
            } // Nombre cliente

            dolarobs.setPlataformaNegociacion("OTC");

            if (baseDto.getBox().getBuyAmount() == null) {
                dolarobs.setMontoMonedaComprada(BigDecimal.ZERO);
            } else {
                dolarobs.setMontoMonedaComprada(baseDto.getBox().getBuyAmount());
            } // Monto de compra

            if (baseDto.getBox().getSellAmount() == null) {
                dolarobs.setMontoMonedaVendida(BigDecimal.ZERO);
            } else {
                dolarobs.setMontoMonedaVendida(baseDto.getBox().getSellAmount());
            } // Monto de salida

            if (baseDto.getOperacion().getPrecioCierre() == null) {
                dolarobs.setTipoCambioOperacion(BigDecimal.ZERO);
            } else {
                dolarobs.setTipoCambioOperacion(baseDto.getOperacion().getPrecioCierre());
            }
            log.info("dolar obs to json");
            dolarObservado_3_1JsonList.add(gson.toJson(dolarobs));
            log.info(gson.toJson(dolarobs));
        }

            return dolarObservado_3_1JsonList;

    }



    public List<String> transformStringToStringList(String jsonString){

        // Expresión regular para identificar cada JSON
        String jsonPattern = "\\{\"id\".*?\"status\":\"VERIFIED\"}}";

        // Lista para almacenar los JSON separados
        List<String> jsonList = new ArrayList<>();

        // Crear el patrón y matcher
        Pattern pattern = Pattern.compile(jsonPattern);
        Matcher matcher = pattern.matcher(jsonString);

        // Extraer cada JSON y añadirlo a la lista
        while (matcher.find()) {
            jsonList.add(matcher.group());
        }

        // Imprimir la lista de JSON separados
        jsonList.forEach(System.out::println);

        return jsonList;
    }


    public List<Caja> transformStringListToCajaList(List<String> stringListCaja) {

        List<Caja> cajaList = new ArrayList<>();

        for(String cajaString: stringListCaja){
            log.info("mapeandoCaja");
            log.info(cajaString);
            Caja caja = gson.fromJson(cajaString, Caja.class);
            cajaList.add(caja);

        }

         return cajaList;
    }


}
